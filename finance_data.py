# -*- coding: utf-8 -*-
"""finance_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ikpEVYMu_ynkB8IsiPxBUUeiwilO8OsO
"""

# Step 1: Import libraries
import pandas as pd
import matplotlib.pyplot as plt

# Step 2: Create sample finance data
data = {
    'Date': ['2025-04-01', '2025-04-03', '2025-04-05', '2025-04-08', '2025-04-12',
             '2025-04-15', '2025-04-18', '2025-04-21', '2025-04-25', '2025-04-28'],
    'Category': ['Groceries', 'Salary', 'Transport', 'Electricity', 'Freelance',
                 'Internet', 'Rent', 'Food Delivery', 'Bonus', 'Shopping'],
    'Amount': [500, 5000, 200, 700, 1500, 300, 2500, 450, 1000, 800],
    'Type': ['Expense', 'Income', 'Expense', 'Expense', 'Income',
             'Expense', 'Expense', 'Expense', 'Income', 'Expense']
}

df = pd.DataFrame(data)
df['Date'] = pd.to_datetime(df['Date'])
df.head()

total_income = df[df['Type'] == 'Income']['Amount'].sum()
total_expense = df[df['Type'] == 'Expense']['Amount'].sum()
savings = total_income - total_expense

print(f"ğŸ’° Total Income: â‚¹{total_income}")
print(f"ğŸ’¸ Total Expense: â‚¹{total_expense}")
print(f"ğŸŸ¢ Net Savings: â‚¹{savings}")

expense_df = df[df['Type'] == 'Expense']
category_data = expense_df.groupby('Category')['Amount'].sum()

plt.figure(figsize=(6,6))
category_data.plot(kind='pie', autopct='%1.1f%%')
plt.title("Category-wise Expense Distribution")
plt.ylabel("")
plt.show()

df['Month'] = df['Date'].dt.to_period('M')
monthly = df.groupby(['Month', 'Type'])['Amount'].sum().unstack().fillna(0)

monthly.plot(kind='line', marker='o', figsize=(10,5))
plt.title("ğŸ“… Monthly Income vs Expense")
plt.xlabel("Month")
plt.ylabel("Amount")
plt.grid(True)
plt.show()

# Budget Planner - Alert if expenses exceed budget
budget = 5000  # User's monthly budget
total_expense = df[df['Type'] == 'Expense']['Amount'].sum()

if total_expense > budget:
    print(f"ğŸš¨ Warning: You have exceeded your budget by â‚¹{total_expense - budget}")
else:
    print(f"âœ… You are within your budget. Total expense is â‚¹{total_expense}")

# Filter by Category
category_filter = 'Expense'
filtered_data = df[df['Type'] == category_filter]
print(filtered_data)

# Filter by Date Range (e.g., this month)
start_date = '2025-04-01'
end_date = '2025-04-30'
df_filtered_by_date = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]
print(df_filtered_by_date)

# Expense vs Income Comparison Bar Chart
df_monthly = df.groupby(['Month', 'Type'])['Amount'].sum().unstack().fillna(0)
df_monthly.plot(kind='bar', figsize=(10,5))
plt.title("ğŸ’¸ Expense vs Income Comparison")
plt.xlabel("Month")
plt.ylabel("Amount")
plt.xticks(rotation=45)
plt.show()

# Top 5 Highest Expenses
top_expenses = expense_df.nlargest(5, 'Amount')
print("Top 5 Highest Expenses:")
print(top_expenses)

# Example: Investment Tracker (Fixed rate return)
initial_investment = 10000  # â‚¹10,000
monthly_return_rate = 0.05  # 5% monthly return

# Calculate Investment after 6 months
months = 6
investment_value = initial_investment * ((1 + monthly_return_rate) ** months)
print(f"Investment value after {months} months: â‚¹{investment_value}")

!pip install reportlab

from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def generate_pdf(report_data):
    c = canvas.Canvas("Finance_Report.pdf", pagesize=letter)
    c.drawString(100, 750, f"Finance Summary Report")
    c.drawString(100, 730, f"Total Income: â‚¹{total_income}")
    c.drawString(100, 710, f"Total Expense: â‚¹{total_expense}")
    c.drawString(100, 690, f"Savings: â‚¹{savings}")
    c.save()

generate_pdf(df)

!pip install streamlit

import streamlit as st
import pandas as pd

st.title('Personal Finance Dashboard')

# User uploads CSV
uploaded_file = st.file_uploader("Upload your finance data CSV", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    df['Date'] = pd.to_datetime(df['Date'])

    st.write("Data Preview:")
    st.write(df.head())

    # Total Income, Expense, Savings
    total_income = df[df['Type'] == 'Income']['Amount'].sum()
    total_expense = df[df['Type'] == 'Expense']['Amount'].sum()
    savings = total_income - total_expense

    st.write(f"ğŸ’° Total Income: â‚¹{total_income}")
    st.write(f"ğŸ’¸ Total Expense: â‚¹{total_expense}")
    st.write(f"ğŸŸ¢ Net Savings: â‚¹{savings}")